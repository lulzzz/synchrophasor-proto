// Code generated by protoc-gen-go.
// source: github.com/michaeldye/synchrophasor-proto/synchrophasor_dpe/synchrophasor_store.proto
// DO NOT EDIT!

/*
Package synchrophasor_dpe is a generated protocol buffer package.

It is generated from these files:
	github.com/michaeldye/synchrophasor-proto/synchrophasor_dpe/synchrophasor_store.proto

It has these top-level messages:
	HorizonDatumWrapper
	DPEResponse
*/
package synchrophasor_dpe

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import pmu_server "github.com/michaeldye/synchrophasor-proto/pmu_server"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HorizonDatumWrapper struct {
	Type        string                         `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Lat         float32                        `protobuf:"fixed32,2,opt,name=lat" json:"lat,omitempty"`
	Lon         float32                        `protobuf:"fixed32,3,opt,name=lon" json:"lon,omitempty"`
	AgreementId string                         `protobuf:"bytes,4,opt,name=agreementId" json:"agreementId,omitempty"`
	DeviceId    string                         `protobuf:"bytes,5,opt,name=deviceId" json:"deviceId,omitempty"`
	HaPartners  []string                       `protobuf:"bytes,6,rep,name=haPartners" json:"haPartners,omitempty"`
	Datum       *pmu_server.SynchrophasorDatum `protobuf:"bytes,7,opt,name=datum" json:"datum,omitempty"`
}

func (m *HorizonDatumWrapper) Reset()                    { *m = HorizonDatumWrapper{} }
func (m *HorizonDatumWrapper) String() string            { return proto.CompactTextString(m) }
func (*HorizonDatumWrapper) ProtoMessage()               {}
func (*HorizonDatumWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HorizonDatumWrapper) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *HorizonDatumWrapper) GetLat() float32 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *HorizonDatumWrapper) GetLon() float32 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *HorizonDatumWrapper) GetAgreementId() string {
	if m != nil {
		return m.AgreementId
	}
	return ""
}

func (m *HorizonDatumWrapper) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

func (m *HorizonDatumWrapper) GetHaPartners() []string {
	if m != nil {
		return m.HaPartners
	}
	return nil
}

func (m *HorizonDatumWrapper) GetDatum() *pmu_server.SynchrophasorDatum {
	if m != nil {
		return m.Datum
	}
	return nil
}

type DPEResponse struct {
}

func (m *DPEResponse) Reset()                    { *m = DPEResponse{} }
func (m *DPEResponse) String() string            { return proto.CompactTextString(m) }
func (*DPEResponse) ProtoMessage()               {}
func (*DPEResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*HorizonDatumWrapper)(nil), "synchrophasor_dpe.HorizonDatumWrapper")
	proto.RegisterType((*DPEResponse)(nil), "synchrophasor_dpe.DPEResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SynchrophasorDPE service

type SynchrophasorDPEClient interface {
	Store(ctx context.Context, opts ...grpc.CallOption) (SynchrophasorDPE_StoreClient, error)
}

type synchrophasorDPEClient struct {
	cc *grpc.ClientConn
}

func NewSynchrophasorDPEClient(cc *grpc.ClientConn) SynchrophasorDPEClient {
	return &synchrophasorDPEClient{cc}
}

func (c *synchrophasorDPEClient) Store(ctx context.Context, opts ...grpc.CallOption) (SynchrophasorDPE_StoreClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SynchrophasorDPE_serviceDesc.Streams[0], c.cc, "/synchrophasor_dpe.SynchrophasorDPE/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &synchrophasorDPEStoreClient{stream}
	return x, nil
}

type SynchrophasorDPE_StoreClient interface {
	Send(*HorizonDatumWrapper) error
	CloseAndRecv() (*DPEResponse, error)
	grpc.ClientStream
}

type synchrophasorDPEStoreClient struct {
	grpc.ClientStream
}

func (x *synchrophasorDPEStoreClient) Send(m *HorizonDatumWrapper) error {
	return x.ClientStream.SendMsg(m)
}

func (x *synchrophasorDPEStoreClient) CloseAndRecv() (*DPEResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DPEResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SynchrophasorDPE service

type SynchrophasorDPEServer interface {
	Store(SynchrophasorDPE_StoreServer) error
}

func RegisterSynchrophasorDPEServer(s *grpc.Server, srv SynchrophasorDPEServer) {
	s.RegisterService(&_SynchrophasorDPE_serviceDesc, srv)
}

func _SynchrophasorDPE_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SynchrophasorDPEServer).Store(&synchrophasorDPEStoreServer{stream})
}

type SynchrophasorDPE_StoreServer interface {
	SendAndClose(*DPEResponse) error
	Recv() (*HorizonDatumWrapper, error)
	grpc.ServerStream
}

type synchrophasorDPEStoreServer struct {
	grpc.ServerStream
}

func (x *synchrophasorDPEStoreServer) SendAndClose(m *DPEResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *synchrophasorDPEStoreServer) Recv() (*HorizonDatumWrapper, error) {
	m := new(HorizonDatumWrapper)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _SynchrophasorDPE_serviceDesc = grpc.ServiceDesc{
	ServiceName: "synchrophasor_dpe.SynchrophasorDPE",
	HandlerType: (*SynchrophasorDPEServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _SynchrophasorDPE_Store_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/michaeldye/synchrophasor-proto/synchrophasor_dpe/synchrophasor_store.proto",
}

func init() {
	proto.RegisterFile("github.com/michaeldye/synchrophasor-proto/synchrophasor_dpe/synchrophasor_store.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 304 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0xcd, 0x6a, 0x32, 0x31,
	0x14, 0x86, 0xbf, 0xf1, 0xef, 0xab, 0x47, 0x0a, 0x36, 0xdd, 0x04, 0x17, 0x32, 0xb8, 0x28, 0xb3,
	0x69, 0x04, 0xdb, 0x4b, 0x50, 0xa8, 0x8b, 0x82, 0x8c, 0x94, 0x2e, 0x25, 0x4e, 0x0e, 0xce, 0x80,
	0x93, 0x84, 0x93, 0x28, 0xd8, 0xbb, 0xed, 0x9d, 0x94, 0x89, 0xa5, 0x1d, 0x7f, 0x16, 0xdd, 0x9d,
	0x3c, 0x79, 0xc2, 0x9b, 0xf3, 0xc2, 0xdb, 0xa6, 0xf0, 0xf9, 0x6e, 0x2d, 0x32, 0x53, 0x8e, 0xcb,
	0x22, 0xcb, 0x25, 0x6e, 0xd5, 0x01, 0xc7, 0xee, 0xa0, 0xb3, 0x9c, 0x8c, 0xcd, 0xa5, 0x33, 0xf4,
	0x68, 0xc9, 0x78, 0x73, 0xca, 0x56, 0xca, 0x9e, 0x59, 0x2b, 0xe7, 0x0d, 0xa1, 0x08, 0x2e, 0xbb,
	0xbb, 0x90, 0x07, 0xaf, 0x7f, 0x4f, 0xb2, 0xe5, 0x6e, 0xe5, 0x90, 0xf6, 0x48, 0xe7, 0xa1, 0xd2,
	0xcb, 0x63, 0xc2, 0xe8, 0x33, 0x82, 0xfb, 0x17, 0x43, 0xc5, 0x87, 0xd1, 0x53, 0xe9, 0x77, 0xe5,
	0x3b, 0x49, 0x6b, 0x91, 0x18, 0x83, 0x96, 0x3f, 0x58, 0xe4, 0x51, 0x1c, 0x25, 0xdd, 0x34, 0xcc,
	0xac, 0x0f, 0xcd, 0xad, 0xf4, 0xbc, 0x11, 0x47, 0x49, 0x23, 0xad, 0xc6, 0x40, 0x8c, 0xe6, 0xcd,
	0x6f, 0x62, 0x34, 0x8b, 0xa1, 0x27, 0x37, 0x84, 0x58, 0xa2, 0xf6, 0x73, 0xc5, 0x5b, 0xe1, 0x79,
	0x1d, 0xb1, 0x01, 0xdc, 0x28, 0xdc, 0x17, 0x19, 0xce, 0x15, 0x6f, 0x87, 0xeb, 0x9f, 0x33, 0x1b,
	0x02, 0xe4, 0x72, 0x21, 0xc9, 0x6b, 0x24, 0xc7, 0x3b, 0x71, 0x33, 0xe9, 0xa6, 0x35, 0xc2, 0x9e,
	0xa1, 0xad, 0xaa, 0x5f, 0xf2, 0xff, 0x71, 0x94, 0xf4, 0x26, 0x43, 0xf1, 0xbb, 0xa2, 0x58, 0xd6,
	0x57, 0x0c, 0xbb, 0xa4, 0x47, 0x79, 0x74, 0x0b, 0xbd, 0xe9, 0x62, 0x96, 0xa2, 0xb3, 0x46, 0x3b,
	0x9c, 0x6c, 0xa0, 0x7f, 0xea, 0x2e, 0x66, 0x6c, 0x09, 0xed, 0x65, 0xd5, 0x3b, 0x7b, 0x10, 0x17,
	0x95, 0x8b, 0x2b, 0xfd, 0x0c, 0x86, 0x57, 0xbc, 0x5a, 0xc8, 0xe8, 0x5f, 0x12, 0xad, 0x3b, 0xa1,
	0xe2, 0xa7, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x97, 0x23, 0x94, 0x1d, 0x02, 0x00, 0x00,
}
