// Code generated by protoc-gen-go.
// source: pmu_server/synchrophasor_data.proto
// DO NOT EDIT!

/*
Package pmu_server is a generated protocol buffer package.

It is generated from these files:
	pmu_server/synchrophasor_data.proto

It has these top-level messages:
	SynchrophasorDatum
	SamplingFilter
*/
package pmu_server

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SynchrophasorDatum struct {
	// unique id across PMUs; assumes PMU device_id is unique and this PMU doesn't generate more than one record with the same TS
	Id        string                        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Ts        uint64                        `protobuf:"varint,2,opt,name=ts" json:"ts,omitempty"`
	PhaseData *SynchrophasorDatum_PhaseData `protobuf:"bytes,3,opt,name=phaseData" json:"phaseData,omitempty"`
}

func (m *SynchrophasorDatum) Reset()                    { *m = SynchrophasorDatum{} }
func (m *SynchrophasorDatum) String() string            { return proto.CompactTextString(m) }
func (*SynchrophasorDatum) ProtoMessage()               {}
func (*SynchrophasorDatum) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SynchrophasorDatum) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SynchrophasorDatum) GetTs() uint64 {
	if m != nil {
		return m.Ts
	}
	return 0
}

func (m *SynchrophasorDatum) GetPhaseData() *SynchrophasorDatum_PhaseData {
	if m != nil {
		return m.PhaseData
	}
	return nil
}

type SynchrophasorDatum_PhaseData struct {
	Phase1CurrentAngle     float64 `protobuf:"fixed64,1,opt,name=Phase1CurrentAngle" json:"Phase1CurrentAngle,omitempty"`
	Phase1CurrentMagnitude float64 `protobuf:"fixed64,2,opt,name=Phase1CurrentMagnitude" json:"Phase1CurrentMagnitude,omitempty"`
	Phase2CurrentAngle     float64 `protobuf:"fixed64,3,opt,name=Phase2CurrentAngle" json:"Phase2CurrentAngle,omitempty"`
	Phase2CurrentMagnitude float64 `protobuf:"fixed64,4,opt,name=Phase2CurrentMagnitude" json:"Phase2CurrentMagnitude,omitempty"`
	Phase3CurrentAngle     float64 `protobuf:"fixed64,5,opt,name=Phase3CurrentAngle" json:"Phase3CurrentAngle,omitempty"`
	Phase3CurrentMagnitude float64 `protobuf:"fixed64,6,opt,name=Phase3CurrentMagnitude" json:"Phase3CurrentMagnitude,omitempty"`
	Phase1VoltageAngle     float64 `protobuf:"fixed64,7,opt,name=Phase1VoltageAngle" json:"Phase1VoltageAngle,omitempty"`
	Phase1VoltageMagnitude float64 `protobuf:"fixed64,8,opt,name=Phase1VoltageMagnitude" json:"Phase1VoltageMagnitude,omitempty"`
	Phase2VoltageAngle     float64 `protobuf:"fixed64,9,opt,name=Phase2VoltageAngle" json:"Phase2VoltageAngle,omitempty"`
	Phase2VoltageMagnitude float64 `protobuf:"fixed64,10,opt,name=Phase2VoltageMagnitude" json:"Phase2VoltageMagnitude,omitempty"`
	Phase3VoltageAngle     float64 `protobuf:"fixed64,11,opt,name=Phase3VoltageAngle" json:"Phase3VoltageAngle,omitempty"`
	Phase3VoltageMagnitude float64 `protobuf:"fixed64,12,opt,name=Phase3VoltageMagnitude" json:"Phase3VoltageMagnitude,omitempty"`
}

func (m *SynchrophasorDatum_PhaseData) Reset()                    { *m = SynchrophasorDatum_PhaseData{} }
func (m *SynchrophasorDatum_PhaseData) String() string            { return proto.CompactTextString(m) }
func (*SynchrophasorDatum_PhaseData) ProtoMessage()               {}
func (*SynchrophasorDatum_PhaseData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *SynchrophasorDatum_PhaseData) GetPhase1CurrentAngle() float64 {
	if m != nil {
		return m.Phase1CurrentAngle
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase1CurrentMagnitude() float64 {
	if m != nil {
		return m.Phase1CurrentMagnitude
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase2CurrentAngle() float64 {
	if m != nil {
		return m.Phase2CurrentAngle
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase2CurrentMagnitude() float64 {
	if m != nil {
		return m.Phase2CurrentMagnitude
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase3CurrentAngle() float64 {
	if m != nil {
		return m.Phase3CurrentAngle
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase3CurrentMagnitude() float64 {
	if m != nil {
		return m.Phase3CurrentMagnitude
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase1VoltageAngle() float64 {
	if m != nil {
		return m.Phase1VoltageAngle
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase1VoltageMagnitude() float64 {
	if m != nil {
		return m.Phase1VoltageMagnitude
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase2VoltageAngle() float64 {
	if m != nil {
		return m.Phase2VoltageAngle
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase2VoltageMagnitude() float64 {
	if m != nil {
		return m.Phase2VoltageMagnitude
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase3VoltageAngle() float64 {
	if m != nil {
		return m.Phase3VoltageAngle
	}
	return 0
}

func (m *SynchrophasorDatum_PhaseData) GetPhase3VoltageMagnitude() float64 {
	if m != nil {
		return m.Phase3VoltageMagnitude
	}
	return 0
}

type SamplingFilter struct {
}

func (m *SamplingFilter) Reset()                    { *m = SamplingFilter{} }
func (m *SamplingFilter) String() string            { return proto.CompactTextString(m) }
func (*SamplingFilter) ProtoMessage()               {}
func (*SamplingFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*SynchrophasorDatum)(nil), "pmu_server.SynchrophasorDatum")
	proto.RegisterType((*SynchrophasorDatum_PhaseData)(nil), "pmu_server.SynchrophasorDatum.PhaseData")
	proto.RegisterType((*SamplingFilter)(nil), "pmu_server.SamplingFilter")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SynchrophasorData service

type SynchrophasorDataClient interface {
	Sample(ctx context.Context, in *SamplingFilter, opts ...grpc.CallOption) (SynchrophasorData_SampleClient, error)
}

type synchrophasorDataClient struct {
	cc *grpc.ClientConn
}

func NewSynchrophasorDataClient(cc *grpc.ClientConn) SynchrophasorDataClient {
	return &synchrophasorDataClient{cc}
}

func (c *synchrophasorDataClient) Sample(ctx context.Context, in *SamplingFilter, opts ...grpc.CallOption) (SynchrophasorData_SampleClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SynchrophasorData_serviceDesc.Streams[0], c.cc, "/pmu_server.SynchrophasorData/Sample", opts...)
	if err != nil {
		return nil, err
	}
	x := &synchrophasorDataSampleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SynchrophasorData_SampleClient interface {
	Recv() (*SynchrophasorDatum, error)
	grpc.ClientStream
}

type synchrophasorDataSampleClient struct {
	grpc.ClientStream
}

func (x *synchrophasorDataSampleClient) Recv() (*SynchrophasorDatum, error) {
	m := new(SynchrophasorDatum)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SynchrophasorData service

type SynchrophasorDataServer interface {
	Sample(*SamplingFilter, SynchrophasorData_SampleServer) error
}

func RegisterSynchrophasorDataServer(s *grpc.Server, srv SynchrophasorDataServer) {
	s.RegisterService(&_SynchrophasorData_serviceDesc, srv)
}

func _SynchrophasorData_Sample_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SamplingFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SynchrophasorDataServer).Sample(m, &synchrophasorDataSampleServer{stream})
}

type SynchrophasorData_SampleServer interface {
	Send(*SynchrophasorDatum) error
	grpc.ServerStream
}

type synchrophasorDataSampleServer struct {
	grpc.ServerStream
}

func (x *synchrophasorDataSampleServer) Send(m *SynchrophasorDatum) error {
	return x.ServerStream.SendMsg(m)
}

var _SynchrophasorData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pmu_server.SynchrophasorData",
	HandlerType: (*SynchrophasorDataServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sample",
			Handler:       _SynchrophasorData_Sample_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pmu_server/synchrophasor_data.proto",
}

func init() { proto.RegisterFile("pmu_server/synchrophasor_data.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0xd3, 0xcd, 0x4b, 0xc3, 0x30,
	0x18, 0x06, 0x70, 0xd3, 0x7d, 0x68, 0xdf, 0xc9, 0xd0, 0x1c, 0x64, 0xec, 0x20, 0x63, 0x5e, 0x7a,
	0xaa, 0x2e, 0x01, 0xef, 0xe2, 0x18, 0x5e, 0x04, 0xe9, 0xc0, 0x9b, 0x8c, 0x68, 0x43, 0x57, 0xe8,
	0xda, 0x92, 0xa6, 0x82, 0xff, 0xba, 0x5e, 0x64, 0x55, 0x97, 0x37, 0xfd, 0xf0, 0xd8, 0x3c, 0x6f,
	0xf2, 0x0b, 0x0f, 0x29, 0x5c, 0xe5, 0xbb, 0x72, 0x53, 0x48, 0xf5, 0x2e, 0xd5, 0x75, 0xf1, 0x91,
	0xbe, 0x6d, 0x55, 0x96, 0x6f, 0x45, 0x91, 0xa9, 0x4d, 0x28, 0xb4, 0xf0, 0x73, 0x95, 0xe9, 0x8c,
	0x82, 0x19, 0x9a, 0x7f, 0x0e, 0x80, 0xae, 0xf1, 0xe0, 0x52, 0xe8, 0x72, 0x47, 0xc7, 0xe0, 0xc4,
	0xe1, 0x84, 0xcc, 0x88, 0xe7, 0x06, 0x4e, 0x1c, 0xee, 0xbf, 0x75, 0x31, 0x71, 0x66, 0xc4, 0xeb,
	0x07, 0x8e, 0x2e, 0xe8, 0x0a, 0xdc, 0xfd, 0xb8, 0x5c, 0x0a, 0x2d, 0x26, 0xbd, 0x19, 0xf1, 0x46,
	0xcc, 0xf3, 0xcd, 0xb1, 0x7e, 0xf3, 0x48, 0xff, 0xe9, 0x6f, 0x3e, 0x30, 0x5b, 0xa7, 0x5f, 0x7d,
	0x70, 0x0f, 0x01, 0xf5, 0x81, 0x56, 0x1f, 0x8b, 0xfb, 0x52, 0x29, 0x99, 0xea, 0xbb, 0x34, 0x4a,
	0x64, 0x75, 0x0b, 0x12, 0xb4, 0x24, 0xf4, 0x16, 0x2e, 0xac, 0xd5, 0x47, 0x11, 0xa5, 0xb1, 0x2e,
	0x43, 0x59, 0xdd, 0x94, 0x04, 0x1d, 0xe9, 0xc1, 0x61, 0x96, 0xd3, 0x43, 0x0e, 0x6b, 0x75, 0x58,
	0xc3, 0xe9, 0x23, 0x87, 0x75, 0x3a, 0xdc, 0x72, 0x06, 0xc8, 0xe1, 0xad, 0x0e, 0x6f, 0x38, 0x43,
	0xe4, 0xf0, 0x4e, 0x67, 0xf1, 0x9c, 0x25, 0x5a, 0x44, 0xf2, 0xc7, 0x39, 0xc6, 0xbd, 0xe1, 0xc4,
	0xf4, 0xf6, 0xbb, 0x6a, 0x9c, 0x13, 0xdc, 0x5b, 0x3d, 0x35, 0xbd, 0x59, 0x8e, 0x8b, 0x7b, 0x6b,
	0x75, 0x58, 0xc3, 0x01, 0xdc, 0x5b, 0xa7, 0xc3, 0x2d, 0x67, 0x84, 0x7b, 0x6b, 0x75, 0x78, 0xc3,
	0x39, 0xc5, 0xbd, 0xd5, 0xd3, 0xf9, 0x19, 0x8c, 0xd7, 0x62, 0x97, 0x27, 0x71, 0x1a, 0xad, 0xe2,
	0x44, 0x4b, 0xc5, 0x5e, 0xe0, 0xbc, 0xfe, 0x74, 0x05, 0x7d, 0x80, 0x61, 0x35, 0x26, 0xe9, 0xd4,
	0x7a, 0xe3, 0xd6, 0xd6, 0xe9, 0xe5, 0xff, 0xef, 0x7f, 0x7e, 0x74, 0x43, 0x5e, 0x87, 0xd5, 0x0f,
	0xc8, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x99, 0x66, 0xdf, 0xbc, 0xa7, 0x03, 0x00, 0x00,
}
